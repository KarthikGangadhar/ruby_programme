#######################################################################
#######################################################################
a1 = [:first, :second, :third, :fourth] # => [:first, :second, :third, :fourth]
a1 = :first, :second, :third, :fourth # => [:first, :second, :third, :fourth]

#######################################################################
#######################################################################
a1 = [:first, :second, :third, :fourth]
a2 = [:before, a1, :after]
p a2 # => [:before, [:first, :second, :third, :fourth], :after]
p a2.flatten # => [:before, :first, :second, :third, :fourth, :after]

#######################################################################
#######################################################################
a1 = [:first, :second, :third, :fourth]
a2 = [:before, *a1, :after]
p a2 # => [:before, :first, :second, :third, :fourth, :after]

#######################################################################
#######################################################################
x, y, z = 1, 2, 3
p x, y, z

#######################################################################
#######################################################################
a1 = [:first, :second, :third, :fourth]
x, y, z = *a1

#######################################################################
#######################################################################
## Assassinate & Assign
## Be the hero your code deserves by saving the arguments you need and dispose of the rest with ease:

a, b = [:a, :b]
a # => :a
b # => :b

a, b = [:a, :b, :c] # :c is lost
a # => :a
b # => :b

a, *rest = [:a, :b, :c]
a # => :a
rest # => [:b, :c]
If you don’t care about the rest? Don’t name it:

a, *= [:a, :b, :c]
a # => :a
You can even rely on Ruby’s implicit splatting and rewrite the above as:

a ,= [:a, :b, :c]
a # => :a
p x, y, z

#######################################################################
#######################################################################
a1 = [:first, :second, :third, :fourth]
x, y, z = :before, *a1
p x, y, z

#######################################################################
#######################################################################
a1 = [:first, :second, :third, :fourth]
*x, y, z =  *a1
p *x, y, z
#######################################################################
#######################################################################

a1 = [:first, :second, :third, :fourth]
x, *y, z =  *a1
p x, *y, z

#######################################################################
#######################################################################
## This is the common practice that we used with methods parametre
a1 = [:first, :second, :third, :fourth]
x, y, *z =  *a1
p x, y, *z

#######################################################################
#######################################################################

a1 = [:first, :second, :third, :fourth]
first, *rest = *a1
p first, *rest

#######################################################################
#######################################################################

def sum3(x, y, z)
  x + y + z
end

triangle = [1,2,3]
p sum3(*triangle)


#######################################################################
#######################################################################
def greet(greeting, *names)
  names.each do |name|
    p "#{greeting}!!#{name} "
  end
end
greet('Good Morning', 'Vinay', 'John', 'Shane')

#######################################################################
#######################################################################

def randon_draw(num_times, num_draws)
  num_times.times do
    draws = num_draws.times.map{ rand(10)}
    yield(*draws)
  end
end

randon_draw(5, 3) do |first, *rest|
  p "#{first} #{rest}  "
end
